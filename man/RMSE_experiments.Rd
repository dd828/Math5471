% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RMSE_experiments.R
\name{RMSE_experiments}
\alias{RMSE_experiments}
\title{RMSE Experiments for Matrix Completion Algorithms}
\usage{
RMSE_experiments(
  m,
  n,
  r,
  rank,
  noise_sd,
  missing_rate,
  lambda,
  max_iter,
  tol = 1e-06,
  method = "all"
)
}
\arguments{
\item{m}{Integer. Number of rows in the matrix.}

\item{n}{Integer. Number of columns in the matrix.}

\item{r}{Integer. Operator rank, the dimension of the low-rank approximation used in algorithms.}

\item{rank}{Integer. Target rank of the matrix (ground truth rank of the synthetic matrix).}

\item{noise_sd}{Numeric. Standard deviation of the noise added to the low-rank matrix.}

\item{missing_rate}{Numeric. Proportion of elements in the matrix that are set to missing (NA).}

\item{lambda}{Numeric. Regularization parameter for the algorithms.}

\item{max_iter}{Integer. Maximum number of iterations for the algorithms.}

\item{tol}{Numeric. Convergence tolerance for stopping the algorithms.

@return A list containing:
\itemize{
\item \code{RMSE_results}: A named list with the RMSE values for each method (\code{observed_rmse} and \code{full_rmse}).
\item The function also prints the RMSE results and plots the reconstructed matrices for visual comparison.
}}

\item{method}{Character. Which method to use for matrix completion. Options are "all", "ALS", "softImpute", or "softImputeALS". Default is "all".}
}
\description{
This function compares the performance of three matrix completion algorithms—ALS, Soft-Impute, and Soft-Impute-ALS—
based on the Root Mean Squared Error (RMSE). It generates a synthetic low-rank matrix, introduces noise and missing
values, applies the specified algorithm(s), and computes the RMSE for both observed and full matrices.
}
\details{
RMSE is computed on both the observed entries (those that were not missing) and the full matrix (including missing values).
}
\examples{
# Example usage:
RMSE_experiments(
  m = 100,
  n = 50,
  r = 5,
  rank = 5,
  noise_sd = 0.1,
  missing_rate = 0.2,
  lambda = 0.1,
  max_iter = 2000,
  method = "all"
)

}
