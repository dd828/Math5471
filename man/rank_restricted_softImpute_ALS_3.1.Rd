% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rank_restricted_softImpute_ALS_3.1.R
\name{rank_restricted_softImpute_ALS_3.1}
\alias{rank_restricted_softImpute_ALS_3.1}
\title{Soft-Impute-ALS Algorithm (Algorithm 3.1)}
\usage{
rank_restricted_softImpute_ALS_3.1(X, r, lambda, max_iter = 100, tol = 1e-06)
}
\arguments{
\item{X}{A numeric matrix of size \code{m x n} with missing values (use \code{NA} for missing entries).}

\item{r}{An integer specifying the target rank for the low-rank approximation.}

\item{lambda}{A numeric value for the regularization parameter, controlling the shrinkage applied to the factor matrices.}

\item{max_iter}{An integer specifying the maximum number of ALS iterations. Default is 100.}

\item{tol}{A numeric value for the convergence tolerance. The algorithm stops if the relative change in
the objective loss between iterations is less than \code{tol}. Default is \code{1e-6}.}
}
\value{
A list containing the following elements:
\item{U}{The left singular matrix of size \code{m x r}.}
\item{D}{The diagonal matrix of shrunk singular values of size \code{r x r}.}
\item{V}{The right singular matrix of size \code{n x r}.}
\item{A}{The factor matrix of size \code{m x r}, representing the row factors.}
\item{B}{The factor matrix of size \code{n x r}, representing the column factors.}
\item{objectives}{A numeric vector of the objective loss values at each iteration.}
}
\description{
Implements the Soft-Impute-ALS Algorithm  (Algorithm 3.1 in the referenced paper).
}
\details{
Convergence is determined by monitoring the relative change in the objective loss, which includes the
reconstruction error and the regularization penalty.
}
\examples{
# Example usage:
set.seed(123)
X <- matrix(rnorm(100 * 50), 100, 50)
X[sample(1:5000, 100)] <- NA  # Introduce missing values
result <- rank_restricted_softImpute_ALS_3.1(X, r = 5, lambda = 0.1)
U <- result$U
D <- result$D
V <- result$V
A <- result$A
B <- result$B
print(dim(U)) # Dimensions of U
print(dim(D)) # Dimensions of D
print(dim(V)) # Dimensions of V
plot(result$objectives, type = "o", main = "Objective Loss vs Iterations")

}
